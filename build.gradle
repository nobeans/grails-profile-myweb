buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:${project.grailsVersion}"
    }
}

apply plugin: "org.grails.grails-profile"
apply plugin: "org.grails.grails-profile-publish"

group 'org.grails.profiles'
version '1.0.0-SNAPSHOT'

grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Profile"
    desc = "Full profile description"
    developers = [johndoe:"John Doe"]
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    // webプロファイルからの派生とする。
    runtime "org.grails.profiles:web:${project.grailsVersion}"
}

task createSampleApp(type: Exec) {
    dependsOn install

    workingDir = file(System.getProperty('java.io.tmpdir'))

    def appName = "myweb-sample"
    def projectDir = file("$workingDir/myweb-sample")

    def cmd = ["grails", "create-app", "--profile=${project.group}:${project.name}:${project.version}"]
    if (Boolean.getBoolean('with-spring-security')) {
        cmd << "--features=hibernate5,asset-pipeline,spring-security"
    }
    cmd << appName
    commandLine = cmd

    doFirst {
        if (projectDir.exists()) {
            // ディレクトリ自体はそのままでその下のファイルをすべて削除する。
            // こうすることで、何度も繰り返してサンプルアプリを再生成して試行錯誤しやすくなる。
            projectDir.eachFile { assert it.directory ? it.deleteDir() : it.delete() }
            println "Deleted existed $projectDir"
        }

        println ">> Executing command..."
        println "\$ ${commandLine.join(' ')}"
    }

    doLast {
        println "Created application at $workingDir/$appName"
    }
}
